KMP求模式串出现的次数及求周期
（一）
int next[maxn+5];
char a[maxn+5],b[maxn+5];
cin>>a+1>>b+1;
void get_next()
{
    int now=0,i=2; // 注意now从0开始
    while(i<=lena)
    {
        if(a[now+1]==a[i])
           next[i++]=++now; 
        else if(now)  //  递归利用
           now=next[now];
        else
           next[i++]=0;
    }
}
void solve()
{
    int i=1,j=1;// 从第一个字符开始匹配
    while(i<=lenb)
    {
        if(b[i]==a[j]) //  显然
            i++,j++;
        else if(j!=1)//  此时b[i]!=a[j],加 j!=1 是防止死循环，利用1--j-1构成的串后缀所含最大前缀
            j=next[j-1]+1;//  next[j-1]是1--j-1串后缀包含的前缀，故+1去匹配下一个字符
        else 
            i++;
        if(j==lena+1)  // 成功匹配了一次模式串
        {
            ans++;
            j=next[j-1]+1;
        }
    }
}
printf("%d\n",ans); //输出匹配数
（二）
用next数组求周期 
如果：  len%(len-next[len])==0
则周期：len/(len-next[len])


void get_next()
{
    int i=1;_next[1]=j=0;
    while(i<=len)
    {
        if(j==0||a[i]==a[j]) _next[++i]=++j; //a[i]==a[j]
        else j=_next[j];
    }
}

int kmp_count()
{
    int i=1,j=1,ans=0;
    while(i<=lenb)
    {
        if(j==0||b[i]==a[j]) i++,j++; //b[i]==a[j]
        else j=_next[j];
        if(j==lena+1)
        {
            ans++;
            j=_next[j];
        }
    }
    return ans;
}
