树上启发式合并的一般化步骤

1.先遍历u的轻儿子，并计算答案，但 不保留遍历后它对cnt数组的影响。
2.遍历它的重儿子，，保留它对cnt数组的影响。
3.再次遍历u的轻儿子的子树结点，加入这些结点的贡献，得到u的答案。


//每个点有一种颜色
//求每个节点的子树的占领点的点权和
#include <bits/stdc++.h>
#define int long long
using namespace std;
const int N=1e5;
const int mod=1e9+7;
int n,sz[N+5],son[N+5];;
int dfn=0,sum=0,mx=0,cnt[N+5],ans[N+5],col[N+5];
int skip;
vector<int> g[N+5];

int dfs(int now,int pre){
    sz[now]=1;
    int mx=-1;
    for(auto x:g[now]){
        if(x==pre) continue;
        dfs(x,now);
        sz[now]+=sz[x];
        if(sz[x]>mx){
            mx=sz[x];
            son[now]=x;
        }
    }
    return sz[now];
}
void add(int now,int pre){
    cnt[col[now]]++;
    if(cnt[col[now]]>mx){
       mx=cnt[col[now]];
       sum=col[now];
    }
    else if(cnt[col[now]]==mx){
        sum+=col[now];
    }
    for(auto &x:g[now]){
        if(x==pre||x==skip)
            continue;
        add(x,now);
    }
}
void del(int now,int pre){
    cnt[col[now]]--;
    for(auto &x:g[now]){
        if(x==pre||x==skip)
            continue;
        del(x,now);
    }
}
void solve(int now,int pre,int keep){
    for(auto &x:g[now]){
        if(x==pre||x==son[now])
            continue;
        solve(x,now,0);
    }
    if(son[now]){
        solve(son[now],now,1);
        skip=son[now];//跳过该重儿子
    }
    add(now,pre);
    skip=0;
    ans[now]=sum;
    if(keep==0){
        del(now,pre);
        sum=mx=0;
    }
}
signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cin>>n;
    for(int i=1;i<=n;++i)
        cin>>col[i];
    for(int i=1;i<=n-1;++i){
        int u,v;cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,0);
    solve(1,0,1);
    for(int i=1;i<=n;++i)
        cout<<ans[i]<<" "
    cout<<endl;
    return 0;
}

#include <bits/stdc++.h>
#define PII pair<int,int> 
#define int long long
using namespace std;
const int N=1e5;
int sz[N+5],son[N+5];
int skip=0,cnt[N+5][22][2];
vector<int> g[N+5];
void dfs1(int now,int fa){
	sz[now]=1;
	int mx=0;
	for(auto x:g[now]){
		if(x==fa) continue;
		dfs1(x,now);
		sz[now]+=sz[x];
		if(sz[x]>mx){
			mx=sz[x];
			son[now]=x;
		}
	}
}
void add(int now,int fa){
	//统计结果和更新cnt
	for(auto x:g[now]){
		if(x==fa||x==skip){
			continue;
		}
		add(x,now);
	}
}
void del(int now,int fa){
	//更新cnt
	for(auto x:g[now]){
		if(x==fa||x==skip)
			continue;
		del(x,now);
	}
}
void dfs2(int now,int fa,int keep){
	for(auto x:g[now]){
		if(x==fa||x==son[now])
			continue;
		dfs2(x,now,0);
	}
	if(son[now]){
		dfs2(son[now],now,1);
		skip=son[now];//跳过该重儿子
	}
	
	skip=0;
	if(!keep){
		del(now,fa);
	}
}
signed main(){
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;cin>>n;
	for(int i=1;i<=n-1;++i){
		int u,v;cin>>u>>v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	dfs1(1,0);
	dfs2(1,0,1);
	cout<<ans<<endl;
	return 0;
}
