初始化
void init()
{
     for(int i=0;i<=N;++i)  fa[i]=i;
}
查询，可以简单证明压缩路径使得树深不超过2	(1)
int _find(int x)
{
    return x==fa[x]? x:fa[x]=_find(fa[x]);
}

//合并，写法有很多。
void join(int u,int v)
{
    fa[join(u)]=join(v);
}

（二）：种类并查集
开k倍数组，不同区间记录不同关系。

（三）带权并查集，基于食物链

更新权值+压缩路径
int _find(int x)
{
    if(x==fa[x]) return x;
    int temp=_find(fa[x]);		//压缩父节点路径并更新fa[x]到根节点权值	,不能省略，@(1)
    dis[x]=(dis[x]+dis[fa[x]])%3;	//更新当前点x的权值为x->fa[x]+fa[x]->根节点
    return fa[x]=temp//=_find(fa[x]);		//利用temp减少递归cen数
}
void join(int u,int v,int x)
{
    int fu=_find(u),fv=_find(v);
    if(fu!=fv)//不在一个集合中
    {
        fa[fu]=fv;			//！！直接合并父节点
        dis[fu]=(dis[v]-dis[u]+x+2)%3;	//向量法更新fu的权值
    }
}
//区间合并例题
const int N=16;
int mod=1e9+7;
int fa[N+5],dis[N+5],ans;
int _find(int x)
{
    if(x==fa[x]) return x;
    int temp=_find(fa[x]);		//压缩父节点路径并更新fa[x]到根节点权值	,不能省略，@(1)
    dis[x]=dis[x]+dis[fa[x]];	//更新当前点x的权值为x->fa[x]+fa[x]->根节点
    return fa[x]=temp ;//=_find(fa[x]);		//利用temp减少递归cen数
}
void join(int u,int v,int x)
{
    int fu=_find(u),fv=_find(v);
    if(fu!=fv)//不在一个集合中
    {
        fa[fu]=fv;			//！！直接合并父节点
        dis[fu]=dis[v]-dis[u]+x;	//向量法更新fu的权值
    }
    else if(dis[u]-dis[v]!=x)
    {
        //cout<<v<<" "<<u<<" "<<dis[v]<<" "<<dis[u]<<endl;
        ans++;
    }
}
signed main()
{
    IOS;
    int n,m;cin>>n>>m;
    for(int i=0;i<=n;++i) fa[i]=i; //从0开始
    for(int i=1;i<=m;++i)
    {
        int l,r,val;cin>>l>>r>>val;
        join(l-1,r,val);//已知[1,3]和[6,10]时，显然已经知道[4,5]的值,l-1则是(0,3]和(5,10]使得[4,5]与原来集合产生关联
    }
    cout<<ans<<endl;
    return 0;
}