树形dp求树的直径
#include<bits/stdc++.h>
using namespace std;
const int N = 1e6 + 5;
vector<int>vec[N];
int ans,first[N+5],second[N+5];    //first[i]表示到i的第一距离，second[i]表示第二距离，可能第一长距离==第二长距离

void dfs(int now, int pre)
{
    if(first[now] || second[now])	   //并没有什么优化，不懂
        return ;
    for(int i=0;i<vec[now].size();i++)
    {
        int v=vec[now][i];
        if(v==pre)    continue ;
        dfs(v,now);
        if(first[v]+1>=first[now])  // 大于等于就更新，first[v]+1是v到u的距离
        {
            second[now]=first[now];
            first[now]=first[v]+1;
        }
        else if(first[v]+1>=second[now])	//大于更新，等于也可以更新
            second[now]=first[v]+1;
    }
    ans=max(ans,first[now]+second[now]);
    return ;
}
int main()
{
    int n, a, b;
    scanf("%d", &n);
    for(int i=1;i<=n-1;++i)
    {
        scanf("%d %d", &a, &b);
        vec[a].push_back(b);
        vec[b].push_back(a);
    }
    dfs(1,0);
    printf("%d\n", ans+1);
    return 0;
}

另一种方法，两遍dfs
先任意点跑一遍dfs求一个到该点距离最远的点，在从该点跑一遍求出最长路。
#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e6 + 5;
vector<int>vec[maxn];
int vis[maxn];
int ans , temp;//temp为第一遍求出的最优点，也是第二遍dfs的起点
void dfs(int x, int h)
{
    vis[x] = 1;
    if(h > ans)
    {
        ans = h;
        temp = x;
    }
    for(int i = 0; i < vec[x].size(); i++)
    {
         int t = vec[x][i];
         if(vis[t] == 0)
            dfs(t, h+1);
    }
    return ;
}
int main()
{
    int n, a, b;
    scanf("%d", &n);
    for(int i=1;i<=n;++i)
    {
        scanf("%d %d", &a, &b);
        vec[a].push_back(b);
        vec[b].push_back(a);
    }
    ans = 0;
    dfs(n/2+n%2, 1);
    memset(vis, 0, sizeof(vis));
    dfs(temp, 1);
    printf("%d\n", ans);
    return 0;
}

//树的重心

int ans;
//方法一
//前向星存图
void dfs (int x,int fa)
{
	son[x]=1,ms[x]=0;
	for (int e=head[x];e;e=nxt[e]){
		if (to[e]==fa)	continue;
		dfs(to[e],x,m);
		son[x]+=son[to[e]];
		ms[x]=max(ms[x],son[to[e]]);
	}
	ms[x]=max(ms[x],m-son[x]);
	if (ms[ans]>ms[x])	ans=x;
}

//求重心方法二
//vector存图，注意res[ans]=inf;dfs(1,0),1是起点，0是祖先
int sz[N+5],res[N+5],ans;//res为最大子树的节点数
vector <int> G[N+5];
void dfs(int x,int fa)
{
    son[x]=1,res[x]=0;//
    for(auto i:G[x])
    {
        if(i==fa) continue;
        dfs(i,x);
        sz[x]+=sz[i];
        res[x]=max(res[x],sz[i]);
    }
    res[x]=max(res[x],n-sz[x]);//n为节点数
    /*if(res[ans]>res[x])
    {
        ans=x;
    }*/
    //若优先选取序号较小的节点 
   /*
    if(res[x]<res[ans]||(res[x]==res[ans]&&ans>x))
    {
        ans=x;
    }
    */
}
signed main()
{
    IOS;
    //int t;cin>>t;
    while(cin>>n)
    {

        for(int i=1;i<=n;++i) G[i].clear();
        for(int i=1;i<=n-1;++i){
            int u,v;cin>>u>>v;
            G[u].push_back(v);
            G[v].push_back(u);
        }
        dfs(1,0);
        ans=1;
        for(int i=1;i<=n;++i)
            if(res[i]<res[ans])
                ans=i;
        cout<<ans<<" "<<res[ans]<<endl;
    }
    return 0;
}

//求路径和，遍历整个图就可以
int bfs(int x)
{
    queue<PII> q;
    q.push({x,0});
    int sum=0;
    while(q.size())
    {
        int u=q.front().first;
        int len=q.front().second;
        sum+=len;
        vis[u]=1;
        q.pop();
        for(auto i:G[u])
        {
            if(vis[i]) continue;
            q.push({i,len+1});//len+1是每个边权为1
        }
    }
    return sum;
}
